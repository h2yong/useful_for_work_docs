K8S相关：
1.Kubernetes Architecture必要节点有哪些？在这些节点上部署的内置组件都有哪些，简述下各个组件的作用.
	Answer :  Kubernetes Architecture主要有两个种节点类型 - 主节点和工作节点。
		主节点内置组件有：
			1.ApiServer：以REST API服务形式提供接口，作为整个系统的控制入口
			2.Scheduler：负责节点资源管理和调度，接收来自kube-apiserver创建Pods任务，并分配到某个节点
			3.ETCD：负责节点间的服务发现和配置共享。
			4.ControllerManager：执行整个系统的后台任务，包括节点状态状况、Pod个数、Pods和Service的关联等
		工作节点内置组件有：
			1.kube-proxy:运行在每个计算节点上，负责Pod网络代理。定时从etcd获取到service信息来做相应的策略。
			2.kubelet:运行在每个计算节点上，作为agent，接收分配该节点的Pods任务及管理容器，周期性获取容器状态，反馈给kube-apiserver。
			3.DNS：一个可选的DNS服务，用于为每个Service对象创建DNS记录，这样所有的Pod就可以通过DNS访问服务了。
2.什么是Ingress网络，它是如何工作的？
	Answer：Ingress网络是一组规则，充当Kubernetes集群的入口点。这允许入站连接，可以将其配置为通过可访问的URL，负载平衡流量或通过提供基于名称的虚拟主机从外部提供服务。因此，Ingress是一个API对象，通常通过HTTP管理集群中服务的外部访问，是暴露服务的最有效方式。

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	Ansible相关：
	1.系统由控制主机对被管节点的操作方式有几种模式，简单介绍下。
	Answer :  
		ad-hoc模式(点对点模式)：使用单个模块，支持批量执行单条命令。ad-hoc 命令是一种可以快速输入的命令，而且不需要保存起来的命令。就相当于bash中的一句话shell。
		playbook模式(剧本模式)：Ansible主要管理方式，也是Ansible功能强大的关键所在。playbook通过多个task集合完成一类功能，如Web服务的安装部署、数据库服务器的批量备份等。可以简单地把playbook理解为通过组合多条ad-hoc操作的配置文件。

	2.Ansible执行流程？
	 首先读取ansible.cfg中的配置， 根据规则获取Inventory中的管理主机列表， 并行的在这些主机中执行配置的任务， 最后等待执行返回的结果
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Docker相关：
	1.四类网络模式：
	host模式	–net=host ：容器和宿主机共享Network namespace。
	container模式	–net=container:NAME_or_ID	容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。
	none模式	–net=none	容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。
	bridge模式	–net=bridge	（默认为该模式）

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Zabbix和Prometheus区别以及应用场景：
	Answer：1.从数据存储方面来看，Zabbix采用关系数据库保存，这极大限制了Zabbix采集的性能，而Prometheus自研一套高性能的时序数据库，在V3版本可以达到每秒千万级别的数据存储，通过对接第三方时序数据库扩展历史数据的存储
		2.从配置复杂度上看，Prometheus只有一个核心server组件，一条命令便可以启动，相比而言，Zabbix配置相对麻烦
		3.从容器支持角度看，由于Zabbix出现得比较早，当时容器还没有诞生，自然对容器的支持也比较差。而Prometheus的动态发现机制，不仅可以支持swarm原生集群，还支持Kubernetes容器集群的监控，是目前容器监控最好解决方案。
